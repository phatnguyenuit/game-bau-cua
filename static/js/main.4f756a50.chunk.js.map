{"version":3,"sources":["components/dice-grid/styles.module.css","components/dice-plate/styles.module.css","components/new-game-button/styles.module.css","components/new-game-button/index.tsx","constants/index.ts","components/dice-plate/index.tsx","utils/index.ts","components/dice-grid/index.tsx","hooks/useDiceGame.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","NewGameButtonComponent","onClick","title","className","classes","root","width","height","src","alt","NewGameButton","memo","displayName","diceNames","diceImages","reduce","prev","name","DicePlateComponent","items","disabled","onStart","map","item","index","content","type","DicePlate","randomIntegerInRange","start","end","Math","floor","random","randomInRange","formatThousand","amount","toString","replace","classnames","args","arg","Array","isArray","flat","Object","entries","key","filter","Boolean","join","DiceGridComponent","betValues","rolledDices","needToShowResult","handleBet","handleResetBet","isBetted","useCallback","diceName","imageSrc","betted","matched","includes","reset","DiceGrid","getRandomNames","fill","undefined","length","initiateBetState","initiateAmount","useDiceGame","useState","names","setNames","betState","setBetState","rolling","setRolling","setNeedToShowResult","intervalId","setIntervalId","timeoutId","setTimeoutId","setAmount","bettedItems","n","bettedAmount","total","alert","e","stopPropagation","makeCleanInterval","id","window","clearInterval","handleRoll","totalAmount","setInterval","setTimeout","startNewSession","useEffect","cleanInterval","clearTimeout","gainedAmount","i","App","data-testid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f756a50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__kr_2d\",\"item\":\"styles_item__1j-O8\",\"content\":\"styles_content__3Lgnn\",\"matched\":\"styles_matched__1ICbi\",\"pulse\":\"styles_pulse__Hi-_I\",\"corner-section\":\"styles_corner-section__orbAR\",\"reset\":\"styles_reset__A3Ld4\",\"bet-value\":\"styles_bet-value__2pSyQ\",\"betted\":\"styles_betted__3Bm6Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__Bag0b\",\"item\":\"styles_item__29bPs\",\"content\":\"styles_content__1qV1g\",\"play-button\":\"styles_play-button__2w0PU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2RVCt\"};","import { memo } from 'react';\n\nimport classes from './styles.module.css';\n\nexport const NewGameButtonComponent: React.FC<NewGameButtonProps> = ({\n  onClick,\n}) => (\n  <button title=\"New game\" className={classes.root} onClick={onClick}>\n    <img width={24} height=\"auto\" src=\"/images/sync.svg\" alt=\"new-game-icon\" />\n  </button>\n);\n\nconst NewGameButton = memo(NewGameButtonComponent);\nNewGameButton.displayName = 'NewGameButton';\n\nexport default NewGameButton;\n\nexport interface NewGameButtonProps {\n  onClick: React.EventHandler<any>;\n}\n","export const CRYPTO_KEY = process.env.REACT_APP_CRYPTO_KEY;\nexport const CRYPTO_SECRET = process.env.REACT_APP_CRYPTO_SECRET;\n\nexport const diceNames = [\n  'deer',\n  'calabash',\n  'rooster',\n  'fish',\n  'crab',\n  'shrimp',\n] as const;\n\nexport type DiceName = typeof diceNames[number];\n\nexport const diceImages = diceNames.reduce(\n  (prev, name) => ({ ...prev, [name]: `/images/${name}.svg` }),\n  {},\n) as Record<DiceName, string>;\n","import { memo } from 'react';\nimport { diceImages, DiceName } from '../../constants';\nimport classes from './styles.module.css';\n\nexport const DicePlateComponent: React.FC<DicePlateProps> = ({\n  items,\n  disabled,\n  onStart,\n}) => (\n  <div className={classes.root}>\n    {items.map((item, index) => (\n      <div key={`${item}-${index}`} className={classes.item}>\n        <div className={classes.content}>\n          <img\n            width={64}\n            height=\"auto\"\n            src={diceImages[item]}\n            alt={`rolled-${item}`}\n          />\n        </div>\n      </div>\n    ))}\n    <button\n      type=\"button\"\n      className={classes['play-button']}\n      disabled={disabled}\n      onClick={onStart}\n    >\n      <img width={64} height=\"auto\" src=\"/images/dice.svg\" alt=\"play-icon\" />\n    </button>\n  </div>\n);\n\nconst DicePlate = memo(DicePlateComponent);\nDicePlate.displayName = 'DicePlate';\n\nexport default DicePlate;\n\nexport interface DicePlateProps {\n  disabled: boolean;\n  items: DiceName[];\n  onStart: React.MouseEventHandler<any>;\n}\n","export const randomInRange = (start: number, end: number) =>\n  Math.random() * (end - start) + start;\n\nexport const randomIntegerInRange = (start: number, end: number) =>\n  Math.floor(randomInRange(start, end));\n\nexport const formatThousand = (amount: number | string) => {\n  const regex = /\\B(?=(\\d{3})+(?!\\d))/g;\n  return amount.toString().replace(regex, ',');\n};\n\nexport const classnames = (...args: any[]) => {\n  const classes = args.map((arg) => {\n    if (typeof arg === 'string') return arg;\n    if (Array.isArray(arg)) return arg.flat();\n    if (typeof arg === 'object') {\n      return Object.entries(arg).map(([key, value]) => {\n        if (value) return key;\n        return '';\n      });\n    }\n    return '';\n  });\n  return classes.flat().filter(Boolean).join(' ');\n};\n","import { memo, useCallback } from 'react';\nimport { classnames } from '../../utils';\nimport { diceImages, DiceName } from '../../constants';\nimport classes from './styles.module.css';\n\nexport const DiceGridComponent: React.FC<DiceGridProps> = ({\n  betValues,\n  rolledDices,\n  needToShowResult,\n  handleBet,\n  handleResetBet,\n}) => {\n  const isBetted = useCallback(\n    (diceName: DiceName) => {\n      return betValues[diceName] > 0;\n    },\n    [betValues],\n  );\n\n  return (\n    <div className={classes.root}>\n      {(Object.entries(diceImages) as Array<[DiceName, string]>).map(\n        ([diceName, imageSrc]) => {\n          const betted = isBetted(diceName);\n          return (\n            <div\n              key={diceName}\n              className={classes.item}\n              onClick={handleBet(diceName)}\n            >\n              <div\n                className={classnames(classes.content, {\n                  [classes.matched]:\n                    needToShowResult && rolledDices.includes(diceName),\n                  [classes.betted]: betted,\n                })}\n              >\n                <img width={108} height=\"auto\" src={imageSrc} alt={diceName} />\n                {betted && (\n                  <>\n                    {!needToShowResult && (\n                      <div className={classes['corner-section']}>\n                        <span\n                          className={classes.reset}\n                          onClick={handleResetBet(diceName)}\n                        >\n                          &#x2715;\n                        </span>\n                      </div>\n                    )}\n                    <div className={classes['bet-value']}>\n                      <span>{betValues[diceName]}</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          );\n        },\n      )}\n    </div>\n  );\n};\n\nconst DiceGrid = memo(DiceGridComponent);\nDiceGrid.displayName = 'DiceGrid';\n\nexport default DiceGrid;\n\nexport interface DiceGridProps {\n  betValues: Record<DiceName, number>;\n  needToShowResult: boolean;\n  rolledDices: DiceName[];\n  handleBet: (name: DiceName) => React.MouseEventHandler<any>;\n  handleResetBet: (name: DiceName) => React.MouseEventHandler<any>;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { randomIntegerInRange } from '../utils';\nimport { DiceName, diceNames } from '../constants';\n\nconst getRandomNames = () => {\n  const getRandomIndex = () => randomIntegerInRange(0, diceNames.length);\n  return new Array(3)\n    .fill(undefined)\n    .map(getRandomIndex)\n    .map((index) => diceNames[index]);\n};\n\nconst initiateBetState = () =>\n  diceNames.reduce((prev, name) => ({ ...prev, [name]: 0 }), {}) as Record<\n    DiceName,\n    number\n  >;\n\nconst initiateAmount = () => randomIntegerInRange(20, 100);\n\nconst useDiceGame = () => {\n  const [names, setNames] = useState<DiceName[]>(getRandomNames);\n  const [betState, setBetState] = useState(initiateBetState);\n  const [rolling, setRolling] = useState(false);\n  const [needToShowResult, setNeedToShowResult] = useState(false);\n  const [intervalId, setIntervalId] = useState<number>();\n  const [timeoutId, setTimeoutId] = useState<number>();\n  const [amount, setAmount] = useState(initiateAmount);\n\n  const handleBet = useCallback(\n    (name: DiceName) => () => {\n      if (!rolling) {\n        const bettedItems = diceNames.filter((n) => betState[n] > 0);\n        const bettedAmount = bettedItems.reduce(\n          (total, item) => total + betState[item],\n          0,\n        );\n\n        if (needToShowResult) {\n          setBetState(initiateBetState);\n        }\n\n        if (bettedAmount < amount) {\n          // can bet only 3 items\n          if (bettedItems.length < 3 || bettedItems.includes(name)) {\n            setNeedToShowResult(false);\n            setBetState((prev) => ({ ...prev, [name]: prev[name] + 1 }));\n          } else {\n            alert('You can bet up to 3 items!');\n          }\n        } else {\n          alert('Please adjust your betted amount!');\n        }\n      }\n    },\n    [amount, betState, needToShowResult, rolling],\n  );\n\n  const handleResetBet = useCallback(\n    (name: DiceName) => (e: React.MouseEvent) => {\n      e.stopPropagation();\n      if (!rolling) {\n        setBetState((prev) => ({ ...prev, [name]: 0 }));\n      }\n    },\n    [rolling],\n  );\n\n  const makeCleanInterval = useCallback(\n    (id?: number) => () => {\n      window.clearInterval(id);\n      setRolling(false);\n      setNeedToShowResult(true);\n    },\n    [],\n  );\n\n  const handleRoll = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      const bettedItems = diceNames.filter((n) => betState[n] > 0);\n      const bettedAmount = bettedItems.reduce(\n        (totalAmount, item) => totalAmount + betState[item],\n        0,\n      );\n      // Can start only having betted and valid betted amount\n      if (bettedItems.length) {\n        if (bettedAmount <= amount) {\n          const id = window.setInterval(() => {\n            setNames(getRandomNames);\n          }, 100);\n          setNeedToShowResult(false);\n          setRolling(true);\n          setIntervalId(id);\n          setTimeoutId(window.setTimeout(makeCleanInterval(id), 3000));\n        } else {\n          alert('Please adjust your betted amount!');\n        }\n      } else {\n        alert('Please bet at least one item!');\n      }\n    },\n    [amount, betState, makeCleanInterval],\n  );\n\n  const startNewSession = useCallback(() => {\n    setAmount(initiateAmount);\n    setNeedToShowResult(false);\n    setBetState(initiateBetState);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (intervalId && timeoutId && rolling) {\n        const cleanInterval = makeCleanInterval(intervalId);\n        cleanInterval();\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [makeCleanInterval, intervalId, timeoutId, rolling]);\n\n  // update amount\n  useEffect(() => {\n    if (!rolling && needToShowResult) {\n      const bettedItems = diceNames.filter((n) => betState[n] > 0);\n      const gainedAmount = bettedItems.reduce((total, item) => {\n        if (names.includes(item)) {\n          const factor = names.filter((i) => i === item).length;\n          return total + factor * betState[item];\n        }\n\n        return total - betState[item];\n      }, 0);\n      setAmount((prev) => prev + gainedAmount);\n    }\n  }, [rolling, betState, names, needToShowResult]);\n\n  return {\n    names,\n    rolling,\n    needToShowResult,\n    betState,\n    amount,\n    handleRoll,\n    handleBet,\n    handleResetBet,\n    startNewSession,\n  };\n};\n\nexport default useDiceGame;\n","import NewGameButton from './components/new-game-button';\nimport DicePlate from './components/dice-plate';\nimport DiceGrid from './components/dice-grid';\nimport useDiceGame from './hooks/useDiceGame';\nimport { formatThousand } from './utils';\n\nimport './App.css';\n\nfunction App() {\n  const {\n    amount,\n    betState,\n    names,\n    needToShowResult,\n    rolling,\n    handleBet,\n    handleResetBet,\n    handleRoll,\n    startNewSession,\n  } = useDiceGame();\n\n  return (\n    <div data-testid=\"App\" className=\"App\">\n      <div className=\"side-section left-side\">Happy new year 2021</div>\n      <div className=\"side-section right-side\">Happy new year 2021</div>\n      <div className=\"amount-section\">\n        <span>${formatThousand(amount)}</span>\n        <NewGameButton onClick={startNewSession} />\n      </div>\n      <DicePlate disabled={rolling} items={names} onStart={handleRoll} />\n      <DiceGrid\n        betValues={betState}\n        rolledDices={names}\n        handleBet={handleBet}\n        handleResetBet={handleResetBet}\n        needToShowResult={needToShowResult}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}