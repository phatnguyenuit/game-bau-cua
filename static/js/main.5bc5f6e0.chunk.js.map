{"version":3,"sources":["utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageNames","images","reduce","prev","name","getRandomNames","Array","fill","undefined","map","Math","floor","random","length","index","initiateBetState","App","useState","names","setNames","betState","setBetState","rolling","setRolling","needToShowResult","setNeedToShowResult","intervalId","setIntervalId","timeoutId","setTimeoutId","amount","setAmount","handleBet","useCallback","bettedItems","filter","n","includes","handleResetBet","e","stopPropagation","makeCleanInterval","id","window","clearInterval","handleRoll","setInterval","setTimeout","useEffect","cleanInterval","clearTimeout","gainedAmount","total","item","useRollDices","data-testid","className","width","height","src","alt","type","disabled","onClick","Object","entries","betted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bc5f6e0.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\n\nexport const imageNames = [\n  'deer',\n  'calabash',\n  'rooster',\n  'fish',\n  'crab',\n  'shrimp',\n] as const;\n\nexport type ImageName = typeof imageNames[number];\n\nexport const images = imageNames.reduce(\n  (prev, name) => ({ ...prev, [name]: `/images/${name}.svg` }),\n  {},\n) as Record<ImageName, string>;\n\nconst getRandomNames = () => {\n  const getRandomIndex = () => Math.floor(Math.random() * imageNames.length);\n  return new Array(3)\n    .fill(undefined)\n    .map(getRandomIndex)\n    .map((index) => imageNames[index]);\n};\n\nconst initiateBetState = () =>\n  imageNames.reduce((prev, name) => ({ ...prev, [name]: 0 }), {}) as Record<\n    ImageName,\n    number\n  >;\n\nexport const useRollDices = () => {\n  const [names, setNames] = useState<ImageName[]>(getRandomNames);\n  const [betState, setBetState] = useState(initiateBetState);\n  const [rolling, setRolling] = useState(false);\n  const [needToShowResult, setNeedToShowResult] = useState(false);\n  const [intervalId, setIntervalId] = useState<number>();\n  const [timeoutId, setTimeoutId] = useState<number>();\n  const [amount, setAmount] = useState(10);\n\n  const handleBet = useCallback(\n    (name: ImageName) => () => {\n      if (!rolling) {\n        const bettedItems = imageNames.filter((n) => betState[n] > 0);\n        // can bet only 3 items\n        if (bettedItems.length < 3 || bettedItems.includes(name)) {\n          setNeedToShowResult(false);\n          setBetState((prev) => ({ ...prev, [name]: prev[name] + 1 }));\n        }\n      }\n    },\n    [betState, rolling],\n  );\n\n  const handleResetBet = useCallback(\n    (name: ImageName) => (e: React.MouseEvent) => {\n      e.stopPropagation();\n      if (!rolling) {\n        setBetState((prev) => ({ ...prev, [name]: 0 }));\n      }\n    },\n    [rolling],\n  );\n\n  const makeCleanInterval = useCallback(\n    (id?: number) => () => {\n      window.clearInterval(id);\n      setRolling(false);\n      setNeedToShowResult(true);\n    },\n    [],\n  );\n\n  const handleRoll = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      const id = window.setInterval(() => {\n        setNames(getRandomNames());\n      }, 100);\n      if (needToShowResult) {\n        setBetState(initiateBetState);\n      }\n      setRolling(true);\n      setNeedToShowResult(false);\n      setIntervalId(id);\n      setTimeoutId(window.setTimeout(makeCleanInterval(id), 3000));\n    },\n    [needToShowResult, makeCleanInterval],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (intervalId && timeoutId && rolling) {\n        const cleanInterval = makeCleanInterval(intervalId);\n        cleanInterval();\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [makeCleanInterval, intervalId, timeoutId, rolling]);\n\n  // update amount\n  useEffect(() => {\n    if (!rolling && needToShowResult) {\n      const bettedItems = imageNames.filter((n) => betState[n] > 0);\n      const gainedAmount = bettedItems.reduce((total, item) => {\n        if (names.includes(item)) {\n          return total + betState[item];\n        }\n\n        return total - betState[item];\n      }, 0);\n      setAmount((prev) => prev + gainedAmount);\n      window.setTimeout(() => {\n        setBetState(initiateBetState);\n      }, 3000);\n    }\n  }, [rolling, betState, names, needToShowResult]);\n\n  return {\n    names,\n    rolling,\n    needToShowResult,\n    betState,\n    amount,\n    handleRoll,\n    handleBet,\n    handleResetBet,\n  };\n};\n","import { images, useRollDices, ImageName } from './utils';\nimport './App.css';\n\nfunction App() {\n  const {\n    names,\n    rolling,\n    needToShowResult,\n    betState,\n    amount,\n    handleRoll,\n    handleBet,\n    handleResetBet,\n  } = useRollDices();\n\n  return (\n    <div data-testid=\"App\" className=\"App\">\n      <div className=\"side-section left-side\">Happy new year 2021</div>\n      <div className=\"side-section right-side\">Happy new year 2021</div>\n      <div className=\"amount\">\n        <span>${amount}</span>\n      </div>\n      <div className=\"game-plate\">\n        {names.map((name, index) => (\n          <div key={`${name}-${index}`} className=\"plate-item\">\n            <div className=\"content\">\n              <img\n                width={64}\n                height=\"auto\"\n                src={images[name]}\n                alt={`rolled-${name}`}\n              />\n            </div>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          className={`play-button`}\n          disabled={rolling}\n          onClick={handleRoll}\n        >\n          <img\n            width={64}\n            height=\"auto\"\n            src=\"/images/dice.svg\"\n            alt=\"play-icon\"\n          />\n        </button>\n      </div>\n      <div className=\"game-grid\">\n        {(Object.entries(images) as Array<[ImageName, string]>).map(\n          ([name, src]) => {\n            const betted = betState[name] > 0;\n            return (\n              <div key={name} className={'game-item'} onClick={handleBet(name)}>\n                <div\n                  className={`content ${\n                    needToShowResult && names.includes(name) ? 'matched' : ''\n                  } ${betState[name] > 0 ? 'betted' : ''}`}\n                >\n                  {betted && (\n                    <>\n                      {!needToShowResult && (\n                        <div className=\"corner-section\">\n                          <span\n                            className=\"reset\"\n                            onClick={handleResetBet(name)}\n                          >\n                            &#x2715;\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"bet-value\">\n                        <span className=\"bet-value\">{betState[name]}</span>\n                      </div>\n                    </>\n                  )}\n\n                  <img width={108} height=\"auto\" src={src} alt={name} />\n                </div>\n              </div>\n            );\n          },\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}